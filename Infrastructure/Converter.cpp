#include "Converter.h"
#include "../Core/Typedefs.h"
#include <vulkan/vulkan_core.h>
#include <unordered_map>
#include <string>
#include "../Core/Interfaces/ILogger.h"

namespace Fractals::Infrastructure
{
    Converter::Converter(const Fractals::Core::Interfaces::SharedILogger& logger)
        : _logger(logger) { }

    SharedConverter Converter::Create(const Fractals::Core::Interfaces::SharedILogger& logger)
    {
        return MAKE_SHARED_CONVERTER(logger);
    }

    SharedString Converter::ToString(const VkPhysicalDeviceType deviceType)
    {
        static const std::unordered_map<VkPhysicalDeviceType, SharedString> deviceTypes
        {
            {VK_PHYSICAL_DEVICE_TYPE_OTHER, MAKE_SHARED_STRING("OTHER")},
            {VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU, MAKE_SHARED_STRING("INTEGRATED_GPU")},
            {VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU, MAKE_SHARED_STRING("DISCRETE_GPU")},
            {VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU, MAKE_SHARED_STRING("VIRTUAL_GPU")},
            {VK_PHYSICAL_DEVICE_TYPE_CPU, MAKE_SHARED_STRING("CPU")}
        };
        static const auto unknownDeviceTypeRet = MAKE_SHARED_STRING("UNKNOWN");
        static const auto unknownDeviceTypeLogMessage = CREATE_LOG_MESSAGE_WITHOUT_PAYLOAD("converter", "unknown VkPhysicalDeviceType");

        if (deviceTypes.contains(deviceType))
            return deviceTypes.at(deviceType);

        _logger->Error(unknownDeviceTypeLogMessage);

        return unknownDeviceTypeRet;
    }

    SharedString Converter::ToString(const VkResult result)
    {
		static const std::unordered_map<VkResult, SharedString> results
		{
			{VK_SUCCESS, MAKE_SHARED_STRING("SUCCESS")},
			{VK_NOT_READY, MAKE_SHARED_STRING("NOT_READY")},
			{VK_TIMEOUT, MAKE_SHARED_STRING("TIMEOUT")},
            {VK_EVENT_SET, MAKE_SHARED_STRING("EVENT_SET")},
            {VK_EVENT_RESET, MAKE_SHARED_STRING("EVENT_RESET")},
            {VK_INCOMPLETE, MAKE_SHARED_STRING("INCOMPLETE")},
            {VK_ERROR_OUT_OF_HOST_MEMORY, MAKE_SHARED_STRING("ERROR_OUT_OF_HOST_MEMORY")},
            {VK_ERROR_OUT_OF_DEVICE_MEMORY, MAKE_SHARED_STRING("ERROR_OUT_OF_DEVICE_MEMORY")},
            {VK_ERROR_INITIALIZATION_FAILED, MAKE_SHARED_STRING("ERROR_INITIALIZATION_FAILED")},
            {VK_ERROR_DEVICE_LOST, MAKE_SHARED_STRING("ERROR_DEVICE_LOST")},
            {VK_ERROR_MEMORY_MAP_FAILED, MAKE_SHARED_STRING("ERROR_MEMORY_MAP_FAILED")},
            {VK_ERROR_LAYER_NOT_PRESENT, MAKE_SHARED_STRING("ERROR_LAYER_NOT_PRESENT")},
            {VK_ERROR_EXTENSION_NOT_PRESENT, MAKE_SHARED_STRING("ERROR_EXTENSION_NOT_PRESENT")},
            {VK_ERROR_FEATURE_NOT_PRESENT, MAKE_SHARED_STRING("ERROR_FEATURE_NOT_PRESENT")},
            {VK_ERROR_INCOMPATIBLE_DRIVER, MAKE_SHARED_STRING("ERROR_INCOMPATIBLE_DRIVER")},
            {VK_ERROR_TOO_MANY_OBJECTS, MAKE_SHARED_STRING("ERROR_TOO_MANY_OBJECTS")},
            {VK_ERROR_FORMAT_NOT_SUPPORTED, MAKE_SHARED_STRING("ERROR_FORMAT_NOT_SUPPORTED")},
            {VK_ERROR_FRAGMENTED_POOL, MAKE_SHARED_STRING("ERROR_FRAGMENTED_POOL")},
            {VK_ERROR_UNKNOWN, MAKE_SHARED_STRING("ERROR_UNKNOWN")},
            {VK_ERROR_OUT_OF_POOL_MEMORY, MAKE_SHARED_STRING("ERROR_OUT_OF_POOL_MEMORY")},
            {VK_ERROR_INVALID_EXTERNAL_HANDLE, MAKE_SHARED_STRING("ERROR_INVALID_EXTERNAL_HANDLE")},
            {VK_ERROR_FRAGMENTATION, MAKE_SHARED_STRING("ERROR_FRAGMENTATION")},
            {VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS, MAKE_SHARED_STRING("ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS")},
            {VK_PIPELINE_COMPILE_REQUIRED, MAKE_SHARED_STRING("PIPELINE_COMPILE_REQUIRED")},
            {VK_ERROR_NOT_PERMITTED, MAKE_SHARED_STRING("ERROR_NOT_PERMITTED")},
            {VK_ERROR_SURFACE_LOST_KHR, MAKE_SHARED_STRING("ERROR_SURFACE_LOST_KHR")},
            {VK_ERROR_NATIVE_WINDOW_IN_USE_KHR, MAKE_SHARED_STRING("ERROR_NATIVE_WINDOW_IN_USE_KHR")},
            {VK_SUBOPTIMAL_KHR, MAKE_SHARED_STRING("SUBOPTIMAL_KHR")},
            {VK_ERROR_OUT_OF_DATE_KHR, MAKE_SHARED_STRING("ERROR_OUT_OF_DATE_KHR")},
            {VK_ERROR_INCOMPATIBLE_DISPLAY_KHR, MAKE_SHARED_STRING("ERROR_INCOMPATIBLE_DISPLAY_KHR")},
            {VK_ERROR_VALIDATION_FAILED_EXT, MAKE_SHARED_STRING("ERROR_VALIDATION_FAILED_EXT")},
            {VK_ERROR_INVALID_SHADER_NV, MAKE_SHARED_STRING("ERROR_INVALID_SHADER_NV")},
            {VK_ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR, MAKE_SHARED_STRING("ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR")},
            {VK_ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR, MAKE_SHARED_STRING("ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR")},
            {VK_ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR, MAKE_SHARED_STRING("ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR")},
            {VK_ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR, MAKE_SHARED_STRING("ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR")},
            {VK_ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR, MAKE_SHARED_STRING("ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR")},
            {VK_ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR, MAKE_SHARED_STRING("ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR")},
            {VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT, MAKE_SHARED_STRING("ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT")},
            {VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT, MAKE_SHARED_STRING("ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT")},
            {VK_THREAD_IDLE_KHR, MAKE_SHARED_STRING("THREAD_IDLE_KHR")},
            {VK_THREAD_DONE_KHR, MAKE_SHARED_STRING("THREAD_DONE_KHR")},
            {VK_OPERATION_DEFERRED_KHR, MAKE_SHARED_STRING("OPERATION_DEFERRED_KHR")},
            {VK_OPERATION_NOT_DEFERRED_KHR, MAKE_SHARED_STRING("OPERATION_NOT_DEFERRED_KHR")},
            {VK_ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR, MAKE_SHARED_STRING("ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR")},
            {VK_ERROR_COMPRESSION_EXHAUSTED_EXT, MAKE_SHARED_STRING("ERROR_COMPRESSION_EXHAUSTED_EXT")},
            {VK_INCOMPATIBLE_SHADER_BINARY_EXT, MAKE_SHARED_STRING("INCOMPATIBLE_SHADER_BINARY_EXT")},
            {VK_PIPELINE_BINARY_MISSING_KHR, MAKE_SHARED_STRING("PIPELINE_BINARY_MISSING_KHR")},
            {VK_ERROR_NOT_ENOUGH_SPACE_KHR, MAKE_SHARED_STRING("ERROR_NOT_ENOUGH_SPACE_KHR")},
            {VK_ERROR_OUT_OF_POOL_MEMORY_KHR, MAKE_SHARED_STRING("ERROR_OUT_OF_POOL_MEMORY_KHR")},
            {VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR, MAKE_SHARED_STRING("ERROR_INVALID_EXTERNAL_HANDLE_KHR")},
            {VK_ERROR_FRAGMENTATION_EXT, MAKE_SHARED_STRING("ERROR_FRAGMENTATION_EXT")},
            {VK_ERROR_NOT_PERMITTED_EXT, MAKE_SHARED_STRING("ERROR_NOT_PERMITTED_EXT")},
            {VK_ERROR_NOT_PERMITTED_KHR, MAKE_SHARED_STRING("ERROR_NOT_PERMITTED_KHR")},
            {VK_ERROR_INVALID_DEVICE_ADDRESS_EXT, MAKE_SHARED_STRING("ERROR_INVALID_DEVICE_ADDRESS_EXT")},
            {VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR, MAKE_SHARED_STRING("ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR")},
            {VK_PIPELINE_COMPILE_REQUIRED_EXT, MAKE_SHARED_STRING("PIPELINE_COMPILE_REQUIRED_EXT")},
            {VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT, MAKE_SHARED_STRING("ERROR_PIPELINE_COMPILE_REQUIRED_EXT")},
			{VK_ERROR_INCOMPATIBLE_SHADER_BINARY_EXT, MAKE_SHARED_STRING("ERROR_INCOMPATIBLE_SHADER_BINARY_EXT")}
		};
        static const auto unknownResultRet = MAKE_SHARED_STRING("UNKNOWN");
        static const auto unknownResultLogMessage = CREATE_LOG_MESSAGE_WITHOUT_PAYLOAD("converter", "unknown VkResult");

        if (results.contains(result))
            return results.at(result);

        _logger->Error(unknownResultLogMessage);

        return unknownResultRet;
    }
}